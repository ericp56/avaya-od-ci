package flow;

import java.util.Random;

import com.avaya.sce.runtimecommon.SCESession;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Avaya Dialog Designer at: 2005-JUN-15  04:18:17 PM
 */
public class RandomNumberGenerator extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Avaya Dialog Designer at: 2005-JUN-15  04:18:17 PM
	 */
	public RandomNumberGenerator() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("calculate", 0, true, "");
		list.add(aGoto);

		return list;
	}
	public void requestBegin(SCESession MySession)
	{
		/******************************************************
		 * This function will randomly generate two numbers
		 * and populate the results in the project variables
		 * Num1 and Num2. Num1 will always be smaller than Num2
		 * unless they are equal to each other.
		 ******************************************************/
		
		Random generator = new Random();
		int intNum1 = generator.nextInt(10) + 1; 
		int intNum2 = generator.nextInt(10) + 1;
		
		if(intNum1>intNum2)
		{
			int intTemp = intNum2;
			intNum2 = intNum1;
			intNum1 = intTemp;
		}
				
		try
		{
		MySession.getVariable(IProjectVariables.NUM_1).getSimpleVariable().setValue("" + intNum1);
		MySession.getVariable(IProjectVariables.NUM_2).getSimpleVariable().setValue("" + intNum2);
		}
		catch(Exception e)
		{
			//Do something
		}
	}
}	
