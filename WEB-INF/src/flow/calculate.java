package flow;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or webservice), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Avaya Dialog Designer at: 2005-JUN-15  04:18:17 PM
 */
public class calculate extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Avaya Dialog Designer at: 2005-JUN-15  04:18:17 PM
	 */
	public calculate() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("WhatIs", "Default");
		next.setDebugId(779);
		return next;
	}
	
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "Choices", "Caller chose to be quized on ", "MathQuizChoice:interpretation").setDebugId(746));
		actions.add(new com.avaya.sce.runtime.varoperations.Add("TotalQuestions", "TotalQuestions", false, "1", true).setDebugId(747));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "Score", "Total number of questions so far are ", "TotalQuestions").setDebugId(748));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "MathQuizChoice:interpretation", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "addition", false).setDebugId(749)).evaluate(mySession)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Add("Num3", "Num1", false, "Num2", false).setDebugId(750));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Temp", "Num1", false).setDebugId(751));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", " plus ", true).setDebugId(752));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "Num2", false).setDebugId(753));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "?", true).setDebugId(754));
			actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "Quiz Question", "What is ", "Temp").setDebugId(755));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "MathQuizChoice:interpretation", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "subtraction", false).setDebugId(756)).evaluate(mySession)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Num3", "Num2", false, "Num1", false).setDebugId(757));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Temp", "Num1", false).setDebugId(758));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", " minus ", true).setDebugId(759));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "Num2", false).setDebugId(760));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "?", true).setDebugId(761));
			actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "Quiz Question ", "What is ", "Temp").setDebugId(762));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "MathQuizChoice:interpretation", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "multiplication", false).setDebugId(763)).evaluate(mySession)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Multiply("Num3", "Num1", false, "Num2", false).setDebugId(764));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Temp", "Num1", false).setDebugId(765));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", " times ", true).setDebugId(766));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "Num2", false).setDebugId(767));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "?", true).setDebugId(768));
			actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "Quiz Question", "What is ", "Temp").setDebugId(769));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "MathQuizChoice:interpretation", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "division", false).setDebugId(770)).evaluate(mySession)) {
			actions = new java.util.ArrayList(8);
			actions.add(new com.avaya.sce.runtime.varoperations.Divide("Num3", "Num2", false, "Num1", false).setDebugId(771));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("Num3", "Num3", ".", false).setDebugId(772));
			actions.add(new com.avaya.sce.runtime.varoperations.Mod("ModNum", "Num2", false, "Num1", false).setDebugId(773));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Temp", "Num1", false).setDebugId(774));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", " divided by ", true).setDebugId(775));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "Num2", false).setDebugId(776));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("Temp", "?", true).setDebugId(777));
			actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "Quiz Question", "What is ", "Temp").setDebugId(778));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
}
